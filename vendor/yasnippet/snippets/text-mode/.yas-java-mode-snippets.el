(yas/define-snippets 'java-mode
		     '(("ass" "assertEquals(\"${1:message}\", ${2:expected}, ${3:actual});" "equals" nil nil nil nil nil)
		       ("ass" "assertFalse(\"${1:message}\", ${2:expression});" "false" nil nil nil nil nil)
		       ("ass" "assertNotNull(\"${1:message}\", ${2:object});" "not null" nil nil nil nil nil)
		       ("ass" "assertNull(\"${1:message}\", ${2:object});" "null" nil nil nil nil nil)
		       ("ass" "assertTrue(\"${1:message}\", ${2:expression});" "true" nil nil nil nil nil)
		       ("author" "/**\n * $0\n *\n * @author Johan Andersson (johan.rejeep@gmail.com)\n */" "Author" nil nil nil nil nil)
		       ("cls" "/**\n * @author `user-full-name` (`user-mail-address`)\n * @date `(format-time-string \"%Y-%m-%d\")`\n */\npublic class ${1:`(file-name-sans-extension (buffer-name))`} {\n  public $1 () {\n    $0\n  }\n}" "Class" nil nil nil nil nil)
		       ("def" "${1:$$(yas/choose-value '(\"public\" \"private\" \"protected\"))} ${2:return-type} ${3:function-name}($4) {\n  $0\n}" "method" nil nil nil nil nil)
		       ("el" "else {\n  $0\n}" "else { ... }" nil nil nil nil nil)
		       ("elif" "else if(${1:condition}) {\n  $0\n}" "else if" nil nil nil nil nil)
		       ("err" "System.err.println($0);" "System.err.println" nil nil nil nil nil)
		       ("exc" "throw new ${1:type}Exception($2);" "throw" nil nil nil nil nil)
		       ("file" "File ${1:variable} = new File(\"${2:path}\");" "File" nil nil nil nil nil)
		       ("for" "for(int ${1:i} = ${2:0}; $1 < ${3:collection}.length; $1++) {\n  $0\n}" "for" nil nil nil nil nil)
		       ("for" "for(${1:type} ${2:variable} : ${3:collection}) {\n  $0\n}" "foreach" nil nil nil nil nil)
		       ("if" "if(${1:condition}) {\n  $0\n}" "if" nil nil nil nil nil)
		       ("inf" "/**\n * @author Johan Andersson (johan.rejeep@gmail.com)\n * @date `(format-time-string \"%Y-%m-%d\")`\n */\npublic interface ${1:`(file-name-sans-extension (buffer-name))`} {\n  $0\n}" "Interface" nil nil nil nil nil)
		       ("init" "public ${1:`(file-name-sans-extension (buffer-name))`}($2) {\n  $0\n}" "Constructor" nil nil nil nil nil)
		       ("ins" "/**\n * $0\n */\nprivate ${1:$$(yas/choose-value '(\"String\" \"int\" \"boolean\" \"float\"))} ${2:value};" "Instance variable" nil nil nil nil nil)
		       ("li" "List<${1:type}> ${2:variable} = new ${3:$$(yas/choose-value '(\"Array\" \"Linked\"))}List<$1>();" "List" nil nil nil nil nil)
		       ("main" "public static void main(String[] args) {\n  $0\n}" "Main method" nil nil nil nil nil)
		       ("map" "Map<${1:key_type}, ${2:value_type}> ${3:variable} = new HashMap<$1, $2>($4);" "HashMap" nil nil nil nil nil)
		       ("out" "System.out.println($0);" "System.out.println" nil nil nil nil nil)
		       ("re" "return" "return" nil nil nil nil nil)
		       ("sc" "Scanner ${1:variable} = null;\n\ntry {\n  $1 = new Scanner($0);\n}\ncatch(FileNotFoundException ${2:e}) {\n  e.printStackTrace();\n}" "Scanner" nil nil nil nil nil)
		       ("set" "Set<${1:type}> ${2:variable} = new HashSet<$1>($3);" "HashSet" nil nil nil nil nil)
		       ("st" "/**\n * \n */\npublic class ${1:`(file-name-sans-extension (buffer-name))`} {\n  /**\n   * An instance of this class.\n   */\n  private static $1 instance = null;\n\n  /**\n   * Private so that it only can be created through getInstance().\n   */\n  private $1() {}\n  \n  $0\n  \n  /**\n   * Will return an instance of this class.\n   * \n   * @return An instance of this class.\n   */\n  public static $1 getInstance() {\n    if(instance == null) {\n      instance = new $1();\n    }\n\n    return instance;\n  }\n}" "Singleton class" nil nil nil nil nil)
		       ("test" "/**\n * \n */\n@After public void ${1:name}($2) {\n  $0\n}" "@After" nil nil nil nil nil)
		       ("test" "/**\n * \n */\n@Before public void ${1:name}($2) {\n  $0\n}" "@Before" nil nil nil nil nil)
		       ("test" "/**\n * \n */\n@Test public void test${1:name}($2) {\n  $0\n}" "@Test" nil nil nil nil nil)
		       ("try" "try {\n  $0\n}\ncatch($1Exception ${2:e}) {\n  $2.printStackTrace();\n}" "try/catch" nil nil nil nil nil)
		       ("wh" "while(${1:condition}) {\n  $0\n}" "condition" nil nil nil nil nil)
		       ("wh" "while(true) {\n  $0\n  break;\n}" "true" nil nil nil nil nil))
		     'nil)